"use strict";
var Observer = (function () {
    function Observer(obj, func) {
        this.obj = null;
        this.func = null;
        this.obj = obj;
        this.func = func;
    }
    return Observer;
}());
module.exports = {
    setup: function (options) {
        this.Event = options.Event;
    },
    _register: {},
    register: function (event, obj, func) {
        if (!event) {
            return;
        }
        if (!(event in this._register)) {
            this._register[event] = [];
        }
        this._register[event].push(new Observer(obj, (func || event)));
    },
    unregister: function (event, obj) {
        if (!event || !(event in this._register)) {
            return;
        }
        this.removeObserver(event, obj);
    },
    unregisterAllEvents: function (obj) {
        if (!obj) {
            return;
        }
        for (var event in this._register) {
            this.removeObserver(event, obj);
        }
    },
    emit: function (event, data) {
        console.info('eventcenter emit: ', event, data);
        if (!event || !(event in this._register)) {
            return;
        }
        for (var _i = 0, _a = this._register[event]; _i < _a.length; _i++) {
            var observer = _a[_i];
            var obj = observer.obj;
            var func = observer.func;
            try {
                if (typeof func === 'function') {
                    func(data);
                }
                else {
                    obj[func] && obj[func](data);
                }
            }
            catch (e) {
                setTimeout(function () {
                    throw e;
                });
            }
        }
    },
    removeObserver: function (event, obj) {
        var toRemove = this._register[event].map(function (observer) { return observer.obj === obj; });
        for (var _i = 0, toRemove_1 = toRemove; _i < toRemove_1.length; _i++) {
            var observer = toRemove_1[_i];
            this._register[event].splice(this._register[event].indexOf(observer), 1);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRjZW50ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldmVudGNlbnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFHSSxrQkFBYSxHQUFPLEVBQUUsSUFBUTtRQUY5QixRQUFHLEdBQU8sSUFBSSxDQUFBO1FBQ2QsU0FBSSxHQUFPLElBQUksQ0FBQTtRQUVYLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7SUFDcEIsQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDLEFBUEQsSUFPQztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDYixLQUFLLEVBQUwsVUFBTyxPQUF3QjtRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUE7SUFDOUIsQ0FBQztJQUNELFNBQVMsRUFBRSxFQUFFO0lBRWIsUUFBUSxFQUFSLFVBQVUsS0FBWSxFQUFFLEdBQU8sRUFBRSxJQUFTO1FBQ3RDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFNO1NBQ1Q7UUFDRCxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFBO1NBQzdCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRUQsVUFBVSxFQUFWLFVBQVksS0FBWSxFQUFFLEdBQU87UUFDN0IsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxPQUFNO1NBQ1Q7UUFDRCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRUQsbUJBQW1CLEVBQW5CLFVBQXFCLEdBQU87UUFDeEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU07U0FDVDtRQUNELEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUNsQztJQUNMLENBQUM7SUFFRCxJQUFJLEVBQUosVUFBTSxLQUFZLEVBQUUsSUFBUTtRQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUMvQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RDLE9BQU07U0FDVDtRQUNELEtBQXFCLFVBQXFCLEVBQXJCLEtBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBckIsY0FBcUIsRUFBckIsSUFBcUIsRUFBRTtZQUF2QyxJQUFJLFFBQVEsU0FBQTtZQUNiLElBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUE7WUFDeEIsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQTtZQUMxQixJQUFJO2dCQUNBLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVSxFQUFFO29CQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7aUJBQ2I7cUJBQU07b0JBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtpQkFDL0I7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLFVBQVUsQ0FBQztvQkFDUCxNQUFNLENBQUMsQ0FBQTtnQkFDWCxDQUFDLENBQUMsQ0FBQTthQUNMO1NBQ0o7SUFDTCxDQUFDO0lBRUQsY0FBYyxFQUFkLFVBQWdCLEtBQVksRUFBRSxHQUFPO1FBQ2pDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsUUFBYSxJQUFLLE9BQUEsUUFBUSxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQXBCLENBQW9CLENBQUMsQ0FBQTtRQUNuRixLQUFxQixVQUFRLEVBQVIscUJBQVEsRUFBUixzQkFBUSxFQUFSLElBQVEsRUFBRTtZQUExQixJQUFJLFFBQVEsaUJBQUE7WUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtTQUMxRTtJQUNMLENBQUM7Q0FDSixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgT2JzZXJ2ZXIge1xuICAgIG9iajphbnkgPSBudWxsXG4gICAgZnVuYzphbnkgPSBudWxsXG4gICAgY29uc3RydWN0b3IgKG9iajphbnksIGZ1bmM6YW55KSB7XG4gICAgICAgIHRoaXMub2JqID0gb2JqXG4gICAgICAgIHRoaXMuZnVuYyA9IGZ1bmNcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNldHVwIChvcHRpb25zOiB7RXZlbnQ6IG9iamVjdH0pIHtcbiAgICAgICAgdGhpcy5FdmVudCA9IG9wdGlvbnMuRXZlbnRcbiAgICB9LFxuICAgIF9yZWdpc3Rlcjoge30sXG5cbiAgICByZWdpc3RlciAoZXZlbnQ6c3RyaW5nLCBvYmo6YW55LCBmdW5jPzphbnkpIHtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0gXG4gICAgICAgIGlmICghKGV2ZW50IGluIHRoaXMuX3JlZ2lzdGVyKSkge1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJbZXZlbnRdID0gW11cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWdpc3RlcltldmVudF0ucHVzaChuZXcgT2JzZXJ2ZXIob2JqLCAoZnVuYyB8fCBldmVudCkpKVxuICAgIH0sXG5cbiAgICB1bnJlZ2lzdGVyIChldmVudDpzdHJpbmcsIG9iajphbnkpIHtcbiAgICAgICAgaWYgKCFldmVudCB8fCAhKGV2ZW50IGluIHRoaXMuX3JlZ2lzdGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0gXG4gICAgICAgIHRoaXMucmVtb3ZlT2JzZXJ2ZXIoZXZlbnQsIG9iailcbiAgICB9LFxuXG4gICAgdW5yZWdpc3RlckFsbEV2ZW50cyAob2JqOmFueSkge1xuICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgcmV0dXJuIFxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGV2ZW50IGluIHRoaXMuX3JlZ2lzdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZU9ic2VydmVyKGV2ZW50LCBvYmopXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZW1pdCAoZXZlbnQ6c3RyaW5nLCBkYXRhOmFueSkge1xuICAgICAgICBjb25zb2xlLmluZm8oJ2V2ZW50Y2VudGVyIGVtaXQ6ICcsIGV2ZW50LCBkYXRhKVxuICAgICAgICBpZiAoIWV2ZW50IHx8ICEoZXZlbnQgaW4gdGhpcy5fcmVnaXN0ZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgb2JzZXJ2ZXIgb2YgdGhpcy5fcmVnaXN0ZXJbZXZlbnRdKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYnNlcnZlci5vYmpcbiAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSBvYnNlcnZlci5mdW5jXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBmdW5jKGRhdGEpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW2Z1bmNdICYmIG9ialtmdW5jXShkYXRhKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVtb3ZlT2JzZXJ2ZXIgKGV2ZW50OnN0cmluZywgb2JqOmFueSkge1xuICAgICAgICBjb25zdCB0b1JlbW92ZSA9IHRoaXMuX3JlZ2lzdGVyW2V2ZW50XS5tYXAoKG9ic2VydmVyOiBhbnkpID0+IG9ic2VydmVyLm9iaiA9PT0gb2JqKVxuICAgICAgICBmb3IgKGxldCBvYnNlcnZlciBvZiB0b1JlbW92ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJbZXZlbnRdLnNwbGljZSh0aGlzLl9yZWdpc3RlcltldmVudF0uaW5kZXhPZihvYnNlcnZlciksMSlcbiAgICAgICAgfVxuICAgIH1cbn0gXG4iXX0=